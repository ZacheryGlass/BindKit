name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Semantic version bump (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major]
  push:
    paths:
      - '.github/trigger'

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path 'requirements.txt') { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Bump version
        id: bump
        shell: pwsh
        run: |
          $path = "VERSION"
          if (!(Test-Path $path)) { '0.1.0' | Out-File -NoNewline $path }
          $version = (Get-Content $path -Raw).Trim()
          if ($version -notmatch '^[0-9]+\.[0-9]+\.[0-9]+$') { Write-Error "Invalid VERSION file: $version" }
          $parts = $version.Split('.')
          $major=[int]$parts[0]; $minor=[int]$parts[1]; $patch=[int]$parts[2]
          switch ('${{ github.event.inputs.release_type }}') {
            'major' { $major++; $minor=0; $patch=0 }
            'minor' { $minor++; $patch=0 }
            default { $patch++ }
          }
          $newVersion = "$major.$minor.$patch"
          Set-Content -NoNewline -Path $path -Value $newVersion
          echo "VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Generate Windows version info (version_info.py)
        shell: pwsh
        run: |
          $ver = $env:VERSION
          if (-not $ver) { Write-Error 'VERSION env var not set'; exit 1 }
          $parts = $ver.Split('.')
          if ($parts.Length -ne 3) { Write-Error "Invalid version: $ver"; exit 1 }
          $major=[int]$parts[0]; $minor=[int]$parts[1]; $patch=[int]$parts[2]
          @"
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=($major, $minor, $patch, 0),
              prodvers=($major, $minor, $patch, 0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
              ),
            kids=[
              StringFileInfo([
                StringTable(
                  u'040904B0',
                  [
                    StringStruct(u'CompanyName', u'BindKit'),
                    StringStruct(u'FileDescription', u'BindKit - System Tray Script Manager'),
                    StringStruct(u'FileVersion', u'$ver.0'),
                    StringStruct(u'InternalName', u'BindKit'),
                    StringStruct(u'OriginalFilename', u'BindKit.exe'),
                    StringStruct(u'ProductName', u'BindKit'),
                    StringStruct(u'ProductVersion', u'$ver.0')
                  ])
                ]),
              VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
            ]
          )
          "@ | Set-Content -Encoding utf8 version_info.py

      - name: Commit version bump and tag
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "chore(release): v${{ env.VERSION }}" || echo "No changes to commit"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin HEAD:${{ github.ref_name }}
          git push origin "v${{ env.VERSION }}"

      - name: Build executable with PyInstaller (spec)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --clean bindkit.spec

      - name: Install Inno Setup
        shell: pwsh
        run: |
          choco install innosetup --no-progress -y

      - name: Build installer with Inno Setup
        shell: pwsh
        run: |
          $iscc = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          & $iscc "installer\bindkit.iss" /DMyAppVersion=${{ env.VERSION }}

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          files: |
            installer/output/BindKit-${{ env.VERSION }}-Setup.exe
            dist/BindKit/BindKit.exe
          draft: false
          prerelease: false
